UNION FIND

a) Dynamic connectivity
- given a set of N objects.
    - union command: connect two objects
    - find / connected query: is there a path connecting the two objects?

- Applications involve manipulating objects of all types: pixels in a digital photo, computers in network, friends in social networks, transistors in computer chip, etc...
- When programming => use integers as array index => suppress details not relevant to union find

- We assume "is connected to" is a equivalence relation:
    - REFLEXIVE: p is connected to q
    - SYMMETRIC: if p is connected to q, then q is connected to p
    - TRANSITIVE: if p is connected to q and q is connected to r then p is connected to r

- connected components: maximal set of objects that are mutually connected
- find query: check if two objects are in the same component
- union command: replace components containing two objects with their union
- goal: design efficient data structure for union-find
    - numbers of objects N can be huge
    - numbers of operations M can be huge
    - find queries and union command can be intermixed


b) Quick Find (eager approach)
- Data structure.
    - Integer array id[] of size N
    - Interpretation: p and q are connected if and only if they have the same id

[0, 1, 1, 8, 8, 0, 0, 1, 8, 9]

- Find. Check if p and q have the same id => id[6] = 0 and id[1] = 1 -> 6 and 1 are not connected
- Union. To merge components containing p and q, change all entries whose id equals id[p] to id[q]
- Problem. Many values can change.

DEMO:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

union(4,3) => id[4] = 4 and id[3] = 3 therefore id[4] = 3 and id[3] = 3

[0,1, 2, 3, 3, 5, 6, 7, 8, 9]

union(3,8)
id[8] = 8 => id[8] = 8
id[3] = 3 => id[3] = 8
id[4] = 4 => id[4] = 8

[0, 1, 2, 8, 8, 5, 6, 7, 8, 9]

- Cost model. Number of array access (for read and write)
- Initialize = N; Union = N; find = 1
- Quick-find defect. Union too expensive. Ex. Takes n2 (quadratic) array access to process sequence of N union commands off N objects.
- Quadratic algorithms do not scale.

c) Quick Union [lazy approach]
- Data structure.
    - Integer array id[] of size N
    - Interpretation: id[i] is parent of i.
    - root of i is [id[id[id[...id[i]...]]]]

- Find. Check if p and q have the same root.

[0, 1, 9, 4, 9, 6, 6, 7, 8, 9]
    - root of 3 is 9; root of 5 is 6 => 3 and 5 are not connected
    - root of 2 is 9; root of 3 is 4 as its root is 9; therefore 2 and 3 are connected

Union. To merge components containing p and q, set id of p's root to the id of q's root.

DEMO:
[0, 1, 9, 4, 9, 6, 6, 7, 8, 9]

union(3,5)

[0, 1, 9, 4, 9, 6, 6, 7, 8, 6] => only one value changed

- Cost model. Number of array access (for read and write)
- Initialize = N, union = N, find = N,
- Quick-find defect.
    - Union too expensive (N array access)
    - Tress are flat, but too expensive to keep them flat
- Quick-union defect.
    - Tress can get tall
    - Find to expensive (could be N array access)


d) Quick Union Improvement - Weighted quick union + path compression
- Weighted quick-union.
    - Modify quick-union to avoid tall trees.
    - Keep track of size of each tree (number of objects)
    - Balance by linking root of smaller tree to root of larger tree

- Data structure. Same as quick union, but maintain extra array size
- Find. Identical to quick-union
- Union. Modify quick union to:
    - Link root of smaller tree to root of larger tree
    - Update the size [] array

- Running time.
    - Find. Takes time proportional to depth of p and q => lg - base -2
    - Union. Takes constant time, given roots

- Initialize = N; union = lgN; find = lgN

- Weighted quick union (with path compression) makes it possible to solve problem that could not otherwise be addressed
- Weighted QU + PC reduces time from 30 years to 6 seconds for 10e9 unions with 10e9 objects


Union-find applications
- percolation, games, dynamic connectivity, least common ancestor, equivalence of finite state automata, Hoshen-Kopelman algorithm in pyhsics,
Hinley-Milner polymorphic type inference, Kruskal's minimum spanning tree algorithm, compiling equivalence statements in Fortran...

